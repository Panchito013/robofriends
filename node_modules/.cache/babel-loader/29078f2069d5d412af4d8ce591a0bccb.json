{"ast":null,"code":"import { CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS, REQUEST_ROBOTS_FAILED } from './constants.js';\nexport const setSearchField = text => ({\n  type: CHANGE_SEARCH_FIELD,\n  payload: text\n});\nexport const requestRobots = dispatch => {\n  dispatch({\n    type: REQUEST_ROBOTS_PENDING\n  });\n  fetch('https://jsonplaceholder.typicode.com/users').then(response => {\n    return response.json();\n  }).then(data => dispatch({\n    type: REQUEST_ROBOTS_SUCCESS,\n    payload: data\n  })).catch(error => dispatch({\n    type: REQUEST_ROBOTS_FAILED,\n    payload: error\n  }));\n};","map":{"version":3,"sources":["/home/panchox/WebDevCourse/robofirends/src/actions.js"],"names":["CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","setSearchField","text","type","payload","requestRobots","dispatch","fetch","then","response","json","data","catch","error"],"mappings":"AAAA,SAASA,mBAAT,EACSC,sBADT,EAESC,sBAFT,EAGSC,qBAHT,QAIc,gBAJd;AAMA,OAAO,MAAMC,cAAc,GAAIC,IAAD,KAAW;AACrCC,EAAAA,IAAI,EAAEN,mBAD+B;AAErCO,EAAAA,OAAO,EAAEF;AAF4B,CAAX,CAAvB;AAMP,OAAO,MAAMG,aAAa,GAAIC,QAAD,IAAc;AACvCA,EAAAA,QAAQ,CAAC;AAACH,IAAAA,IAAI,EAAEL;AAAP,GAAD,CAAR;AACAS,EAAAA,KAAK,CAAC,4CAAD,CAAL,CACKC,IADL,CACUC,QAAQ,IAAI;AACd,WAAOA,QAAQ,CAACC,IAAT,EAAP;AACH,GAHL,EAIKF,IAJL,CAIUG,IAAI,IAAIL,QAAQ,CAAC;AAACH,IAAAA,IAAI,EAAEJ,sBAAP;AAA+BK,IAAAA,OAAO,EAAEO;AAAxC,GAAD,CAJ1B,EAKKC,KALL,CAKWC,KAAK,IAAIP,QAAQ,CAAC;AAACH,IAAAA,IAAI,EAAEH,qBAAP;AAA8BI,IAAAA,OAAO,EAAES;AAAvC,GAAD,CAL5B;AAMH,CARM","sourcesContent":["import { CHANGE_SEARCH_FIELD,\n         REQUEST_ROBOTS_PENDING,\n         REQUEST_ROBOTS_SUCCESS,\n         REQUEST_ROBOTS_FAILED\n       } from './constants.js'\n\nexport const setSearchField = (text) => ({\n    type: CHANGE_SEARCH_FIELD,\n    payload: text\n})\n\n\nexport const requestRobots = (dispatch) => {\n    dispatch({type: REQUEST_ROBOTS_PENDING});\n    fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response => {\n            return response.json();\n        })\n        .then(data => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: data}))\n        .catch(error => dispatch({type: REQUEST_ROBOTS_FAILED, payload: error}))\n}"]},"metadata":{},"sourceType":"module"}